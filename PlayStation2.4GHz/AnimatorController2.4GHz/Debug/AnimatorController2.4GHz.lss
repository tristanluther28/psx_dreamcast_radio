
AnimatorController2.4GHz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000448  000004dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000448  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  0080010a  0080010a  000004e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013d1  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000940  00000000  00000000  000019b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a8  00000000  00000000  000022f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000029a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000588  00000000  00000000  00002b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085e  00000000  00000000  000030c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e8 e4       	ldi	r30, 0x48	; 72
  80:	f4 e0       	ldi	r31, 0x04	; 4
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	aa 30       	cpi	r26, 0x0A	; 10
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	aa e0       	ldi	r26, 0x0A	; 10
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a6 33       	cpi	r26, 0x36	; 54
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
  a2:	0c 94 22 02 	jmp	0x444	; 0x444 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <SPI_init>:
	//Read out the received message
	buffer = nRF24L01_Transfer(READ, R_RX_PAYLOAD, buffer, 5);
	nRF24L01_Reset();
	//return the received buffer
	return buffer;
}
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	8c 62       	ori	r24, 0x2C	; 44
  ae:	84 b9       	out	0x04, r24	; 4
  b0:	2c 9a       	sbi	0x05, 4	; 5
  b2:	8d e7       	ldi	r24, 0x7D	; 125
  b4:	8c bd       	out	0x2c, r24	; 44
  b6:	1d bc       	out	0x2d, r1	; 45
  b8:	08 95       	ret

000000ba <SPI_Enable>:
  ba:	2a 98       	cbi	0x05, 2	; 5
  bc:	08 95       	ret

000000be <SPI_Disable>:
  be:	2a 9a       	sbi	0x05, 2	; 5
  c0:	08 95       	ret

000000c2 <SPI_Transfer>:
  c2:	8e bd       	out	0x2e, r24	; 46
  c4:	0d b4       	in	r0, 0x2d	; 45
  c6:	07 fe       	sbrs	r0, 7
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <SPI_Transfer+0x2>
  ca:	8e b5       	in	r24, 0x2e	; 46
  cc:	08 95       	ret

000000ce <PSX_init>:
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	84 b9       	out	0x04, r24	; 4
  d2:	2e 9a       	sbi	0x05, 6	; 5
  d4:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_init>
  d8:	08 95       	ret

000000da <PSX_Read>:
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	ec 01       	movw	r28, r24
  e2:	0e 94 5d 00 	call	0xba	; 0xba <SPI_Enable>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
  ec:	82 e4       	ldi	r24, 0x42	; 66
  ee:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
  f2:	88 83       	st	Y, r24
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 100:	18 2f       	mov	r17, r24
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 108:	91 2f       	mov	r25, r17
 10a:	90 95       	com	r25
 10c:	29 2f       	mov	r18, r25
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	32 2f       	mov	r19, r18
 112:	22 27       	eor	r18, r18
 114:	80 95       	com	r24
 116:	28 2b       	or	r18, r24
 118:	3a 83       	std	Y+2, r19	; 0x02
 11a:	29 83       	std	Y+1, r18	; 0x01
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 122:	80 95       	com	r24
 124:	8d 83       	std	Y+5, r24	; 0x05
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 12c:	80 95       	com	r24
 12e:	8e 83       	std	Y+6, r24	; 0x06
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 136:	80 95       	com	r24
 138:	8b 83       	std	Y+3, r24	; 0x03
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 140:	80 95       	com	r24
 142:	8c 83       	std	Y+4, r24	; 0x04
 144:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_Disable>
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	08 95       	ret

00000152 <nRF24L01_Enable>:
 152:	8c b5       	in	r24, 0x2c	; 44
 154:	83 7d       	andi	r24, 0xD3	; 211
 156:	8c bd       	out	0x2c, r24	; 44
 158:	40 98       	cbi	0x08, 0	; 8
 15a:	08 95       	ret

0000015c <nRF24L01_Disable>:
 15c:	40 9a       	sbi	0x08, 0	; 8
 15e:	8c b5       	in	r24, 0x2c	; 44
 160:	8c 62       	ori	r24, 0x2C	; 44
 162:	8c bd       	out	0x2c, r24	; 44
 164:	08 95       	ret

00000166 <nRF24L01_Transfer>:
 166:	af 92       	push	r10
 168:	bf 92       	push	r11
 16a:	cf 92       	push	r12
 16c:	df 92       	push	r13
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	b8 2e       	mov	r11, r24
 17c:	a6 2e       	mov	r10, r22
 17e:	6a 01       	movw	r12, r20
 180:	f2 2e       	mov	r15, r18
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	b8 12       	cpse	r11, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <nRF24L01_Transfer+0x26>
 188:	e0 e2       	ldi	r30, 0x20	; 32
 18a:	ae 0e       	add	r10, r30
 18c:	f3 e0       	ldi	r31, 0x03	; 3
 18e:	fa 95       	dec	r31
 190:	f1 f7       	brne	.-4      	; 0x18e <nRF24L01_Transfer+0x28>
 192:	00 00       	nop
 194:	0e 94 a9 00 	call	0x152	; 0x152 <nRF24L01_Enable>
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <nRF24L01_Transfer+0x34>
 19e:	00 00       	nop
 1a0:	8a 2d       	mov	r24, r10
 1a2:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 1a6:	e3 e0       	ldi	r30, 0x03	; 3
 1a8:	ea 95       	dec	r30
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <nRF24L01_Transfer+0x42>
 1ac:	00 00       	nop
 1ae:	ff 20       	and	r15, r15
 1b0:	39 f1       	breq	.+78     	; 0x200 <nRF24L01_Transfer+0x9a>
 1b2:	06 e1       	ldi	r16, 0x16	; 22
 1b4:	11 e0       	ldi	r17, 0x01	; 1
 1b6:	e6 01       	movw	r28, r12
 1b8:	fa 94       	dec	r15
 1ba:	ef 2c       	mov	r14, r15
 1bc:	f1 2c       	mov	r15, r1
 1be:	ff ef       	ldi	r31, 0xFF	; 255
 1c0:	ef 1a       	sub	r14, r31
 1c2:	ff 0a       	sbc	r15, r31
 1c4:	ec 0c       	add	r14, r12
 1c6:	fd 1c       	adc	r15, r13
 1c8:	b1 10       	cpse	r11, r1
 1ca:	0d c0       	rjmp	.+26     	; 0x1e6 <nRF24L01_Transfer+0x80>
 1cc:	80 ea       	ldi	r24, 0xA0	; 160
 1ce:	a8 16       	cp	r10, r24
 1d0:	51 f0       	breq	.+20     	; 0x1e6 <nRF24L01_Transfer+0x80>
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 1d8:	f8 01       	movw	r30, r16
 1da:	80 83       	st	Z, r24
 1dc:	f3 e0       	ldi	r31, 0x03	; 3
 1de:	fa 95       	dec	r31
 1e0:	f1 f7       	brne	.-4      	; 0x1de <nRF24L01_Transfer+0x78>
 1e2:	00 00       	nop
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <nRF24L01_Transfer+0x8e>
 1e6:	88 81       	ld	r24, Y
 1e8:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	8a 95       	dec	r24
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <nRF24L01_Transfer+0x88>
 1f2:	00 00       	nop
 1f4:	0f 5f       	subi	r16, 0xFF	; 255
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
 1f8:	21 96       	adiw	r28, 0x01	; 1
 1fa:	ce 15       	cp	r28, r14
 1fc:	df 05       	cpc	r29, r15
 1fe:	21 f7       	brne	.-56     	; 0x1c8 <nRF24L01_Transfer+0x62>
 200:	0e 94 ae 00 	call	0x15c	; 0x15c <nRF24L01_Disable>
 204:	86 e1       	ldi	r24, 0x16	; 22
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	df 90       	pop	r13
 216:	cf 90       	pop	r12
 218:	bf 90       	pop	r11
 21a:	af 90       	pop	r10
 21c:	08 95       	ret

0000021e <nRF24L01_Reset>:
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	8a 95       	dec	r24
 222:	f1 f7       	brne	.-4      	; 0x220 <nRF24L01_Reset+0x2>
 224:	00 00       	nop
 226:	40 98       	cbi	0x08, 0	; 8
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <nRF24L01_Reset+0xc>
 22e:	00 00       	nop
 230:	87 e2       	ldi	r24, 0x27	; 39
 232:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	8a 95       	dec	r24
 23a:	f1 f7       	brne	.-4      	; 0x238 <nRF24L01_Reset+0x1a>
 23c:	00 00       	nop
 23e:	80 e7       	ldi	r24, 0x70	; 112
 240:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	8a 95       	dec	r24
 248:	f1 f7       	brne	.-4      	; 0x246 <nRF24L01_Reset+0x28>
 24a:	00 00       	nop
 24c:	40 9a       	sbi	0x08, 0	; 8
 24e:	08 95       	ret

00000250 <nRF24L01_ReadRegister>:
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	8a 95       	dec	r24
 258:	f1 f7       	brne	.-4      	; 0x256 <nRF24L01_ReadRegister+0x6>
 25a:	00 00       	nop
 25c:	0e 94 a9 00 	call	0x152	; 0x152 <nRF24L01_Enable>
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	8a 95       	dec	r24
 264:	f1 f7       	brne	.-4      	; 0x262 <nRF24L01_ReadRegister+0x12>
 266:	00 00       	nop
 268:	8c 2f       	mov	r24, r28
 26a:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	8a 95       	dec	r24
 272:	f1 f7       	brne	.-4      	; 0x270 <nRF24L01_ReadRegister+0x20>
 274:	00 00       	nop
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	0e 94 61 00 	call	0xc2	; 0xc2 <SPI_Transfer>
 27c:	c8 2f       	mov	r28, r24
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	8a 95       	dec	r24
 282:	f1 f7       	brne	.-4      	; 0x280 <nRF24L01_ReadRegister+0x30>
 284:	00 00       	nop
 286:	0e 94 ae 00 	call	0x15c	; 0x15c <nRF24L01_Disable>
 28a:	8c 2f       	mov	r24, r28
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <nRF24L01_init>:
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	1f 92       	push	r1
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	08 2f       	mov	r16, r24
 2a8:	6b 01       	movw	r12, r22
 2aa:	7a 01       	movw	r14, r20
 2ac:	87 b1       	in	r24, 0x07	; 7
 2ae:	83 60       	ori	r24, 0x03	; 3
 2b0:	87 b9       	out	0x07, r24	; 7
 2b2:	88 b1       	in	r24, 0x08	; 8
 2b4:	83 60       	ori	r24, 0x03	; 3
 2b6:	88 b9       	out	0x08, r24	; 8
 2b8:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_init>
 2bc:	11 e0       	ldi	r17, 0x01	; 1
 2be:	19 83       	std	Y+1, r17	; 0x01
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	ae 01       	movw	r20, r28
 2c4:	4f 5f       	subi	r20, 0xFF	; 255
 2c6:	5f 4f       	sbci	r21, 0xFF	; 255
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 b3 00 	call	0x166	; 0x166 <nRF24L01_Transfer>
 2d0:	8f e2       	ldi	r24, 0x2F	; 47
 2d2:	89 83       	std	Y+1, r24	; 0x01
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	ae 01       	movw	r20, r28
 2d8:	4f 5f       	subi	r20, 0xFF	; 255
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	64 e0       	ldi	r22, 0x04	; 4
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 b3 00 	call	0x166	; 0x166 <nRF24L01_Transfer>
 2e4:	19 83       	std	Y+1, r17	; 0x01
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	ae 01       	movw	r20, r28
 2ea:	4f 5f       	subi	r20, 0xFF	; 255
 2ec:	5f 4f       	sbci	r21, 0xFF	; 255
 2ee:	62 e0       	ldi	r22, 0x02	; 2
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 b3 00 	call	0x166	; 0x166 <nRF24L01_Transfer>
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	89 83       	std	Y+1, r24	; 0x01
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	ae 01       	movw	r20, r28
 2fe:	4f 5f       	subi	r20, 0xFF	; 255
 300:	5f 4f       	sbci	r21, 0xFF	; 255
 302:	63 e0       	ldi	r22, 0x03	; 3
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 b3 00 	call	0x166	; 0x166 <nRF24L01_Transfer>
 30a:	19 83       	std	Y+1, r17	; 0x01
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	ae 01       	movw	r20, r28
 310:	4f 5f       	subi	r20, 0xFF	; 255
 312:	5f 4f       	sbci	r21, 0xFF	; 255
 314:	65 e0       	ldi	r22, 0x05	; 5
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 b3 00 	call	0x166	; 0x166 <nRF24L01_Transfer>
 31c:	87 e0       	ldi	r24, 0x07	; 7
 31e:	89 83       	std	Y+1, r24	; 0x01
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	ae 01       	movw	r20, r28
 324:	4f 5f       	subi	r20, 0xFF	; 255
 326:	5f 4f       	sbci	r21, 0xFF	; 255
 328:	66 e0       	ldi	r22, 0x06	; 6
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 b3 00 	call	0x166	; 0x166 <nRF24L01_Transfer>
 330:	25 e0       	ldi	r18, 0x05	; 5
 332:	a6 01       	movw	r20, r12
 334:	6a e0       	ldi	r22, 0x0A	; 10
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 b3 00 	call	0x166	; 0x166 <nRF24L01_Transfer>
 33c:	25 e0       	ldi	r18, 0x05	; 5
 33e:	a7 01       	movw	r20, r14
 340:	60 e1       	ldi	r22, 0x10	; 16
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 b3 00 	call	0x166	; 0x166 <nRF24L01_Transfer>
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	89 83       	std	Y+1, r24	; 0x01
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	ae 01       	movw	r20, r28
 350:	4f 5f       	subi	r20, 0xFF	; 255
 352:	5f 4f       	sbci	r21, 0xFF	; 255
 354:	61 e1       	ldi	r22, 0x11	; 17
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 b3 00 	call	0x166	; 0x166 <nRF24L01_Transfer>
 35c:	0e 31       	cpi	r16, 0x1E	; 30
 35e:	19 f4       	brne	.+6      	; 0x366 <nRF24L01_init+0xd6>
 360:	8e e7       	ldi	r24, 0x7E	; 126
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	02 c0       	rjmp	.+4      	; 0x36a <nRF24L01_init+0xda>
 366:	8f e7       	ldi	r24, 0x7F	; 127
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	ae 01       	movw	r20, r28
 36e:	4f 5f       	subi	r20, 0xFF	; 255
 370:	5f 4f       	sbci	r21, 0xFF	; 255
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 b3 00 	call	0x166	; 0x166 <nRF24L01_Transfer>
 37a:	87 ea       	ldi	r24, 0xA7	; 167
 37c:	91 e6       	ldi	r25, 0x61	; 97
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <nRF24L01_init+0xee>
 382:	00 c0       	rjmp	.+0      	; 0x384 <nRF24L01_init+0xf4>
 384:	00 00       	nop
 386:	0f 90       	pop	r0
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	08 95       	ret

0000039a <nRF24L01_Transmit>:
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	ec 01       	movw	r28, r24
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	ac 01       	movw	r20, r24
 3a4:	61 ee       	ldi	r22, 0xE1	; 225
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 b3 00 	call	0x166	; 0x166 <nRF24L01_Transfer>
 3ac:	25 e0       	ldi	r18, 0x05	; 5
 3ae:	ae 01       	movw	r20, r28
 3b0:	60 ea       	ldi	r22, 0xA0	; 160
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 b3 00 	call	0x166	; 0x166 <nRF24L01_Transfer>
 3b8:	83 ec       	ldi	r24, 0xC3	; 195
 3ba:	99 e0       	ldi	r25, 0x09	; 9
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <nRF24L01_Transmit+0x22>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <nRF24L01_Transmit+0x28>
 3c2:	00 00       	nop
 3c4:	41 9a       	sbi	0x08, 1	; 8
 3c6:	96 e0       	ldi	r25, 0x06	; 6
 3c8:	9a 95       	dec	r25
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <nRF24L01_Transmit+0x2e>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <nRF24L01_Transmit+0x34>
 3ce:	41 98       	cbi	0x08, 1	; 8
 3d0:	83 ec       	ldi	r24, 0xC3	; 195
 3d2:	99 e0       	ldi	r25, 0x09	; 9
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <nRF24L01_Transmit+0x3a>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <nRF24L01_Transmit+0x40>
 3da:	00 00       	nop
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <main>:
		
	//Buffer for transmitting data
	static uint8_t tx_buffer[5];
	
	//Initialize the debug output
	DDRB |= (1<<PB0);
 3e2:	20 9a       	sbi	0x04, 0	; 4
	//Set the default values for outputs to zero and inputs to have pull-up resistors
	PORTB |= (0<<PB0);
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	85 b9       	out	0x05, r24	; 5
	
	//Initialize the PS1 Communications
	PSX_init();
 3e8:	0e 94 67 00 	call	0xce	; 0xce <PSX_init>
	//Initialize the nRF24L01 Communications as a transmitter
	nRF24L01_init(TX, rx_address, tx_address);
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	51 e0       	ldi	r21, 0x01	; 1
 3f0:	65 e0       	ldi	r22, 0x05	; 5
 3f2:	71 e0       	ldi	r23, 0x01	; 1
 3f4:	8e e1       	ldi	r24, 0x1E	; 30
 3f6:	0e 94 48 01 	call	0x290	; 0x290 <nRF24L01_init>
	
	//Set interrupts
	sei();
 3fa:	78 94       	sei
	{
		//Get the current controller status
		static PSXControllerStatus controller;
		PSX_Read(&controller);
		//Put controller data into the tx_buffer to be transmitted
		tx_buffer[0] = ((uint16_t)controller.buttons >> 0) & 0xFF; //First byte of digital buttons
 3fc:	ca e0       	ldi	r28, 0x0A	; 10
 3fe:	d1 e0       	ldi	r29, 0x01	; 1
	/* State machine loop */
	while (1)
	{
		//Get the current controller status
		static PSXControllerStatus controller;
		PSX_Read(&controller);
 400:	8f e0       	ldi	r24, 0x0F	; 15
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 6d 00 	call	0xda	; 0xda <PSX_Read>
		//Put controller data into the tx_buffer to be transmitted
		tx_buffer[0] = ((uint16_t)controller.buttons >> 0) & 0xFF; //First byte of digital buttons
 408:	ef e0       	ldi	r30, 0x0F	; 15
 40a:	f1 e0       	ldi	r31, 0x01	; 1
 40c:	91 81       	ldd	r25, Z+1	; 0x01
 40e:	82 81       	ldd	r24, Z+2	; 0x02
 410:	98 83       	st	Y, r25
		tx_buffer[1] = ((uint16_t)controller.buttons >> 8) & 0xFF; //Second byte of digital buttons
 412:	89 83       	std	Y+1, r24	; 0x01
		tx_buffer[2] = controller.joylx; //Left joystick for direction (X-coord)
 414:	83 81       	ldd	r24, Z+3	; 0x03
 416:	8a 83       	std	Y+2, r24	; 0x02
		tx_buffer[3] = controller.joyly; //Left joystick for direction (Y-coord)
 418:	84 81       	ldd	r24, Z+4	; 0x04
 41a:	8b 83       	std	Y+3, r24	; 0x03
		tx_buffer[4] = 0x00;
 41c:	1c 82       	std	Y+4, r1	; 0x04
			PORTB &= ~(1<<PB0);
		}
		*/
		
		//Transmit the controller data
		nRF24L01_Transmit(tx_buffer);
 41e:	ce 01       	movw	r24, r28
 420:	0e 94 cd 01 	call	0x39a	; 0x39a <nRF24L01_Transmit>
		
		//Check that the transmission was successful (If MAX_RT is 1 then the transmission failed)
		if((nRF24L01_ReadRegister(STATUS) & (1<<MAX_RT)) != 0){
 424:	87 e0       	ldi	r24, 0x07	; 7
 426:	0e 94 28 01 	call	0x250	; 0x250 <nRF24L01_ReadRegister>
 42a:	84 ff       	sbrs	r24, 4
 42c:	04 c0       	rjmp	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			PORTB |= (1<<PB0);
 42e:	28 9a       	sbi	0x05, 0	; 5
			//Reset the nRF
			nRF24L01_Reset();
 430:	0e 94 0f 01 	call	0x21e	; 0x21e <nRF24L01_Reset>
			PORTB &= ~(1<<PB0);
 434:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 436:	87 e8       	ldi	r24, 0x87	; 135
 438:	93 e1       	ldi	r25, 0x13	; 19
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 440:	00 00       	nop
 442:	de cf       	rjmp	.-68     	; 0x400 <__LOCK_REGION_LENGTH__>

00000444 <_exit>:
 444:	f8 94       	cli

00000446 <__stop_program>:
 446:	ff cf       	rjmp	.-2      	; 0x446 <__stop_program>
